version: '3.4'

networks:
  kafka_network:
    name: kafka_net


services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    hostname: zookeeper
    container_name: vs-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: 
      - kafka_network

  broker:
    image: confluentinc/cp-kafka:7.0.0
    container_name: vs-kafka-broker
    hostname: vs-kafka-broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL_L:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL_L://vs-kafka-broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CREATE_TOPICS: "purchases:1:1"
    networks: 
      - kafka_network

  webapplication2:
    image: registryfordemo.azurecr.io/webapplication2
    build:
      context: .
      dockerfile: WebApplication2/Dockerfile
    ports: 
      - "80:80"
      - "443:443"
    networks: 
      - kafka_network

  consoleappconsumer:
    image: registryfordemo.azurecr.io/consoleappconsumer
    build:
      context: .
      dockerfile: ConsoleAppConsumer/Dockerfile
    networks: 
      - kafka_network
